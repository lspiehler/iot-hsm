#!/usr/bin/env node

var config = require('../config');
var slotlib = require('../lib/slotlib');
var IoTHSM = require('../lib/IoTHSM');

var server;
var debug = require('debug')('pkcs11iot:server');

console.log('initializing slots...');
slotlib.getSlots(false, function(err, slots) {
	if(err) {
		console.log('Error getting slots:')
		console.log(err)
	} else {
		//console.log(slots);
		console.log('Slots initialized...');
	}
});

slotlib.event.on('changed', function(cachedslots) {
    //console.log('here');
    //console.log(cachedslots.slots);
    IoTHSM.connectSlots(cachedslots.slots, function(err) {});
});

	/**
	 * Module dependencies.
	 */

	var app = require('../lib/express');
	//var pubnub = require('../lib/pubnub');
	var http = require('http');

	/**
	 * Get port from environment and store in Express.
	 */

	var port = normalizePort(config.PORT);
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port, config.LISTENIP);
	server.on('error', onError);
	server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
